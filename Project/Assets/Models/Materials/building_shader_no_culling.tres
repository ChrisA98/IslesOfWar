[gd_resource type="Shader" format=3 uid="uid://vlnudqa1d4vl"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable's StandardMaterial3D.

shader_type spatial;

global uniform sampler2D heightmap_tex;
global uniform vec2 heightmap_tex_size = vec2(1000.0,1000.0);
uniform float t_height = 100;
uniform bool heightmap_lock;

render_mode blend_mix,depth_draw_always,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular: hint_range(0,1);
uniform float metallic: hint_range(0,1);
uniform sampler2D texture_normal : hint_roughness_normal,filter_linear_mipmap,repeat_enable;
uniform float normal_scale : hint_range(-16,16);
uniform sampler2D texture_ambient_occlusion : hint_default_white, filter_linear_mipmap,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv2_scale;

uniform bool use_player_albedo;
uniform vec4 player_albedo: source_color;
uniform vec4 color_albedo : source_color = vec4(1,1,1,1);

float get_height(vec2 x){
  float hgt = (texture(heightmap_tex,x).y) * t_height;
  return hgt;
}


vec3 get_normal(vec2 uv) {
	vec2 e = vec2(0.01, 0.0);
	vec3 normal = normalize(vec3(get_height(uv - e) / t_height - get_height(uv + e) / t_height, 2.0 * e.x, get_height(uv - e.yx) / t_height - get_height(uv + e.yx) / t_height));
	return normal;
}



void vertex() {
	UV=UV*uv1_scale.xy;
	UV2=UV2*uv2_scale.xy;
	if (heightmap_lock){
		VERTEX.y -= NODE_POSITION_WORLD.y;
		vec2 pos_uv = vec2((NODE_POSITION_WORLD.x)/heightmap_tex_size.x,(NODE_POSITION_WORLD.z)/heightmap_tex_size.y)+((vec2(VERTEX.x,VERTEX.z)/heightmap_tex_size)) + vec2(.5);
		VERTEX.y += get_height(pos_uv);
	}
}



void fragment() {
	vec2 base_uv = UV;
	if (use_player_albedo){
		ALBEDO = player_albedo.rgb;
	}else{
		vec4 albedo_tex = texture(texture_albedo,base_uv);
		ALBEDO = color_albedo.rgb * albedo_tex.rgb;
	}
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMAL_MAP = texture(texture_normal,base_uv).rgb;
	NORMAL_MAP_DEPTH = normal_scale;
	ALPHA = color_albedo.a;
}
"
