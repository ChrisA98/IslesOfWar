[gd_resource type="Shader" format=3 uid="uid://b5n24spudc4co"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;


uniform float sway_intensity: hint_range(0,8);
uniform float swat_max: hint_range(0,8);
uniform float speed: hint_range(0,8);

void vertex() {
	if (VERTEX.x > 0.0){
		float wave = cos((VERTEX.x + NODE_POSITION_WORLD.x*50.0 + TIME * speed) * sway_intensity) * swat_max * (VERTEX.x);
		float wave2 = sin((VERTEX.z + TIME * speed) * sway_intensity) * swat_max * (VERTEX.x);
		VERTEX.y += (wave *0.4) *sway_intensity;
		VERTEX.z += (wave2 *0.05) *sway_intensity;
	}
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}
"
